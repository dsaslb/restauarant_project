apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policies
  namespace: restaurant-system
data:
  # API 접근 제어 정책
  api-access.rego: |
    package restaurant.api
    
    # 기본적으로 모든 요청을 거부
    default allow = false
    
    # 허용된 사용자 역할
    allowed_roles = {"admin", "manager", "staff", "user"}
    
    # 허용된 API 엔드포인트
    allowed_endpoints = {
        "/health",
        "/api/auth/login",
        "/api/auth/register",
        "/api/users/profile"
    }
    
    # 관리자 전용 엔드포인트
    admin_endpoints = {
        "/api/admin",
        "/api/users",
        "/api/staff",
        "/api/analytics"
    }
    
    # 매니저 전용 엔드포인트
    manager_endpoints = {
        "/api/staff",
        "/api/schedule",
        "/api/inventory",
        "/api/orders"
    }
    
    # 요청 허용 조건
    allow {
        # JWT 토큰이 유효하고
        input.token.valid == true
        
        # 사용자 역할이 허용된 역할 중 하나이고
        input.user.role in allowed_roles
        
        # 엔드포인트가 허용된 엔드포인트 중 하나이거나
        input.request.path in allowed_endpoints
    }
    
    # 관리자 접근 허용
    allow {
        input.token.valid == true
        input.user.role == "admin"
        input.request.path in admin_endpoints
    }
    
    # 매니저 접근 허용
    allow {
        input.token.valid == true
        input.user.role == "manager"
        input.request.path in manager_endpoints
    }
    
    # 본인 데이터 접근 허용
    allow {
        input.token.valid == true
        input.user.role in allowed_roles
        input.request.path == "/api/users/profile"
        input.request.method == "GET"
        input.user.id == input.request.user_id
    }
  
  # 데이터 접근 제어 정책
  data-access.rego: |
    package restaurant.data
    
    # 기본적으로 모든 데이터 접근을 거부
    default allow_read = false
    default allow_write = false
    
    # 사용자 데이터 접근 규칙
    allow_read {
        input.user.role == "admin"
    }
    
    allow_read {
        input.user.role == "manager"
        input.resource.type == "staff"
    }
    
    allow_read {
        input.user.role == "staff"
        input.resource.type == "schedule"
        input.resource.staff_id == input.user.id
    }
    
    allow_read {
        input.user.role == "user"
        input.resource.type == "order"
        input.resource.user_id == input.user.id
    }
    
    # 데이터 쓰기 규칙
    allow_write {
        input.user.role == "admin"
    }
    
    allow_write {
        input.user.role == "manager"
        input.resource.type in {"staff", "schedule", "inventory"}
    }
    
    allow_write {
        input.user.role == "staff"
        input.resource.type == "attendance"
        input.resource.staff_id == input.user.id
    }
    
    allow_write {
        input.user.role == "user"
        input.resource.type == "order"
        input.resource.user_id == input.user.id
    }
  
  # IoT 기기 제어 정책
  iot-control.rego: |
    package restaurant.iot
    
    # IoT 기기 제어 권한
    default allow_control = false
    
    # 허용된 IoT 기기 제어 역할
    iot_roles = {"admin", "manager", "iot_operator"}
    
    # 허용된 IoT 기기 타입
    allowed_device_types = {
        "temperature_sensor",
        "humidity_sensor",
        "weight_sensor",
        "motion_sensor",
        "refrigerator",
        "lighting"
    }
    
    # 위험한 제어 명령
    dangerous_commands = {
        "shutdown",
        "reset",
        "factory_reset",
        "delete_data"
    }
    
    # 기본 IoT 제어 허용
    allow_control {
        input.user.role in iot_roles
        input.device.type in allowed_device_types
        not input.command in dangerous_commands
    }
    
    # 위험한 명령은 관리자만 허용
    allow_control {
        input.user.role == "admin"
        input.device.type in allowed_device_types
    }
    
    # IoT 데이터 읽기 권한
    allow_read {
        input.user.role in iot_roles
        input.device.type in allowed_device_types
    }
  
  # 네트워크 보안 정책
  network-security.rego: |
    package restaurant.network
    
    # 허용된 IP 주소 범위
    allowed_ips = {
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16"
    }
    
    # 허용된 포트
    allowed_ports = {80, 443, 5000, 5001, 5006, 5432, 6379}
    
    # 네트워크 접근 허용
    allow_network_access {
        input.source_ip in allowed_ips
        input.destination_port in allowed_ports
    }
    
    # 서비스 간 통신 허용
    allow_service_communication {
        input.source_service in {"gateway", "user", "iot"}
        input.destination_service in {"user", "iot", "postgres", "redis"}
    } 